import re
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotEventType
from bot.bot_logic import get_birth_date, get_city, get_sex


def missed_user_data_collector(session, longpoll, user_id, dictionary, count=0):
    """
    Function allows to get from user missed personal data
    :param session: VK active session
    :param longpoll: VK Bot longpoll - tech of "long" requests, where answers comes only if event appears
    :param user_id: active user VK ID
    :param dictionary: dict with basic user params, by default generated by VK API as response for user.get() method
    :param count: inner counter for steps execution control. It is possible to skip some steps, by changing this param
    :return: full dictionary with user params
    """
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            if event.from_user:
                if event.obj.message['text'] == 'Закончить сеанс':
                    return False
                else:
                    if 'bdate' not in dictionary.keys() \
                            or re.match(r'\d{1,2}\.\d{1,2}\.\d{2,4}$', dictionary['bdate']) is None \
                            or dictionary['bdate'] == 'Fail':
                        if count == 0 and ('bdate' not in dictionary.keys()
                                           or re.match(r'\d{1,2}\.\d{1,2}\.\d{2,4}$', dictionary['bdate']) is None):
                            session.messages.send(
                                user_id=user_id,
                                random_id=get_random_id(),
                                message='Введите вашу дату рождения (дд.мм.гггг): '
                            )
                            count = 1
                        if session.messages.getHistory(user_id=user_id, count=2)['items'][0]['text'] not in \
                                ['Введите вашу дату рождения (дд.мм.гггг):'] and count < 2:
                            dictionary.update({'bdate': get_birth_date(event)})
                            if get_birth_date(event) == 'Fail':
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Не удалось идентифицировать данные (др). Повторите ввод: '
                                )
                            elif get_birth_date(event) != 'Fail' and count < 2:
                                count = 2
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Дата рождения добавлена'
                                )
                    else:
                        if count < 2:
                            count = 2

                    if ('bdate' in dictionary.keys() and dictionary['bdate'] != 'Fail'
                        and re.match(r'\d{1,2}\.\d{1,2}\.\d{2,4}$', dictionary['bdate']) is not None) and (
                            'city' not in dictionary.keys() or dictionary['city'] == 'Fail'):
                        if count == 2 and 'city' not in dictionary.keys():
                            session.messages.send(
                                user_id=user_id,
                                random_id=get_random_id(),
                                message='Укажите город проживания:'
                            )
                            count = 3
                        if session.messages.getHistory(user_id=user_id, count=2)['items'][0]['text'] \
                                != 'Укажите город проживания:' and count < 4:
                            dictionary.update({'city': get_city(event)})
                            if get_city(event) == 'Fail':
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Не удалось идентифицировать данные(город). Повторите ввод: '
                                )
                            elif get_city(event) != 'Fail' and count < 4:
                                count = 4
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Город проживания добавлен'
                                )
                    elif ('bdate' in dictionary.keys() and dictionary['bdate'] != 'Fail'
                          and re.match(r'\d{1,2}\.\d{1,2}\.\d{2,4}$', dictionary['bdate']) is not None) and \
                            ('city' in dictionary.keys() and dictionary['city'] != 'Fail'):
                        if count < 4:
                            count = 4

                    if ('bdate' in dictionary.keys() and dictionary['bdate'] != 'Fail'
                        and re.match(r'\d{1,2}\.\d{1,2}\.\d{2,4}$', dictionary['bdate']) is not None) and \
                            ('city' in dictionary.keys() and dictionary['city'] != 'Fail') and \
                            ('sex' not in dictionary.keys() or dictionary['sex'] == 'Fail'):
                        if count == 4 and 'sex' not in dictionary.keys():
                            session.messages.send(
                                user_id=user_id,
                                random_id=get_random_id(),
                                message='Укажите свой пол (муж. или жен.):'
                            )
                            count = 5
                        if session.messages.getHistory(user_id=user_id, count=2)['items'][0]['text'] \
                                != 'Укажите свой пол (муж. или жен.):' and count < 6:
                            dictionary.update({'sex': get_sex(event)})
                            if get_sex(event) == 'Fail':
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Не удалось идентифицировать данные(пол). Повторите ввод: '
                                )
                            elif get_city(event) != 'Fail' and count < 6:
                                count = 6
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Пол добавлен'
                                )

                    if 'bdate' in dictionary.keys() \
                            and re.match(r'\d{1,2}\.\d{1,2}\.\d{2,4}$', dictionary['bdate']) is not None \
                            and 'city' in dictionary.keys() and 'sex' in dictionary.keys():
                        correct_data_counter = 0
                        for i in ['bdate', 'city', 'sex']:
                            if dictionary[i] == 'Fail':
                                dictionary.pop(i)
                            else:
                                correct_data_counter += 1
                        else:
                            if correct_data_counter == 3:
                                session.messages.send(
                                    user_id=user_id,
                                    random_id=get_random_id(),
                                    message='Все данные успешно добавлены!'
                                )
                            return dictionary
